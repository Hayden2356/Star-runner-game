<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Star Runner Game - Mobile Version</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }
        #gameCanvas {
            display: block;
            touch-action: none;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // Set canvas size to match the iPhone 15 screen (scaled down for better performance)
        const scale = 0.5; // Adjust this value to change the game's resolution
        canvas.width = 1179 * scale;
        canvas.height = 2556 * scale;

        // Game variables
        let score = 0;
        let gameSpeed = 5;

        // Star (player) object
        const star = {
            x: canvas.width * 0.2,
            y: canvas.height / 2,
            size: canvas.width * 0.1,
            dy: 0,
            jumpForce: -15,
            gravity: 0.8,
            grounded: false
        };

        // Obstacles array
        let obstacles = [];

        // Game loop
        function gameLoop() {
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Update score
            score++;

            // Move and draw star
            updateStar();
            drawStar();

            // Generate and draw obstacles
            if (obstacles.length === 0 || obstacles[obstacles.length - 1].x < canvas.width - canvas.width * 0.3) {
                obstacles.push({
                    x: canvas.width,
                    y: Math.random() * (canvas.height - star.size),
                    width: star.size * 0.8,
                    height: star.size * 0.8
                });
            }

            obstacles.forEach((obstacle, index) => {
                obstacle.x -= gameSpeed;
                drawObstacle(obstacle);

                // Check collision
                if (
                    star.x < obstacle.x + obstacle.width &&
                    star.x + star.size > obstacle.x &&
                    star.y < obstacle.y + obstacle.height &&
                    star.y + star.size > obstacle.y
                ) {
                    gameOver();
                }

                // Remove off-screen obstacles
                if (obstacle.x + obstacle.width < 0) {
                    obstacles.splice(index, 1);
                }
            });

            // Draw score
            ctx.fillStyle = 'black';
            ctx.font = `${canvas.width * 0.05}px Arial`;
            ctx.fillText(`Score: ${score}`, canvas.width * 0.05, canvas.height * 0.05);

            requestAnimationFrame(gameLoop);
        }

        function updateStar() {
            star.dy += star.gravity;
            star.y += star.dy;

            if (star.y + star.size > canvas.height) {
                star.y = canvas.height - star.size;
                star.dy = 0;
                star.grounded = true;
            } else {
                star.grounded = false;
            }
        }

        function drawStar() {
            ctx.fillStyle = 'gold';
            ctx.beginPath();
            for (let i = 0; i < 5; i++) {
                ctx.lineTo(
                    star.x + star.size / 2 * Math.cos(i * 4 * Math.PI / 5 - Math.PI / 2),
                    star.y + star.size / 2 * Math.sin(i * 4 * Math.PI / 5 - Math.PI / 2)
                );
                ctx.lineTo(
                    star.x + star.size / 4 * Math.cos((i + 0.5) * 4 * Math.PI / 5 - Math.PI / 2),
                    star.y + star.size / 4 * Math.sin((i + 0.5) * 4 * Math.PI / 5 - Math.PI / 2)
                );
            }
            ctx.closePath();
            ctx.fill();
        }

        function drawObstacle(obstacle) {
            ctx.fillStyle = 'red';
            ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
        }

        function gameOver() {
            alert(`Game Over! Your score: ${score}`);
            score = 0;
            obstacles = [];
            star.y = canvas.height / 2;
            star.dy = 0;
        }

        // Touch event listener for jumping
        canvas.addEventListener('touchstart', (event) => {
            event.preventDefault();
            if (star.grounded) {
                star.dy = star.jumpForce;
            }
        }, { passive: false });

        // Resize canvas when the window size changes
        window.addEventListener('resize', resizeCanvas);

        function resizeCanvas() {
            const scale = 0.5; // Same scale as initially set
            canvas.width = window.innerWidth * scale;
            canvas.height = window.innerHeight * scale;
            
            // Adjust game elements based on new canvas size
            star.size = canvas.width * 0.1;
            star.x = canvas.width * 0.2;
            star.y = canvas.height / 2;
        }

        // Initial resize
        resizeCanvas();

        // Start the game
        gameLoop();
    </script>
</body>
</html>